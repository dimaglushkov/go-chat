// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: butler.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ButlerClient is the client API for Butler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ButlerClient interface {
	CreateRoom(ctx context.Context, in *RoomNameSize, opts ...grpc.CallOption) (*RoomPort, error)
	FindRoom(ctx context.Context, in *RoomName, opts ...grpc.CallOption) (*RoomPort, error)
}

type butlerClient struct {
	cc grpc.ClientConnInterface
}

func NewButlerClient(cc grpc.ClientConnInterface) ButlerClient {
	return &butlerClient{cc}
}

func (c *butlerClient) CreateRoom(ctx context.Context, in *RoomNameSize, opts ...grpc.CallOption) (*RoomPort, error) {
	out := new(RoomPort)
	err := c.cc.Invoke(ctx, "/server.Butler/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *butlerClient) FindRoom(ctx context.Context, in *RoomName, opts ...grpc.CallOption) (*RoomPort, error) {
	out := new(RoomPort)
	err := c.cc.Invoke(ctx, "/server.Butler/FindRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ButlerServer is the server API for Butler service.
// All implementations must embed UnimplementedButlerServer
// for forward compatibility
type ButlerServer interface {
	CreateRoom(context.Context, *RoomNameSize) (*RoomPort, error)
	FindRoom(context.Context, *RoomName) (*RoomPort, error)
	mustEmbedUnimplementedButlerServer()
}

// UnimplementedButlerServer must be embedded to have forward compatible implementations.
type UnimplementedButlerServer struct {
}

func (UnimplementedButlerServer) CreateRoom(context.Context, *RoomNameSize) (*RoomPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedButlerServer) FindRoom(context.Context, *RoomName) (*RoomPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoom not implemented")
}
func (UnimplementedButlerServer) mustEmbedUnimplementedButlerServer() {}

// UnsafeButlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ButlerServer will
// result in compilation errors.
type UnsafeButlerServer interface {
	mustEmbedUnimplementedButlerServer()
}

func RegisterButlerServer(s grpc.ServiceRegistrar, srv ButlerServer) {
	s.RegisterService(&Butler_ServiceDesc, srv)
}

func _Butler_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomNameSize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ButlerServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Butler/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ButlerServer).CreateRoom(ctx, req.(*RoomNameSize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Butler_FindRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ButlerServer).FindRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Butler/FindRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ButlerServer).FindRoom(ctx, req.(*RoomName))
	}
	return interceptor(ctx, in, info, handler)
}

// Butler_ServiceDesc is the grpc.ServiceDesc for Butler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Butler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Butler",
	HandlerType: (*ButlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Butler_CreateRoom_Handler,
		},
		{
			MethodName: "FindRoom",
			Handler:    _Butler_FindRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "butler.proto",
}
